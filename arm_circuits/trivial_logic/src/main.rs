// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use arm::{logic_instance::LogicInstance, resource_logic::TrivialLogicWitness};
use risc0_zkvm::{default_prover, ExecutorEnv};
use std::time::Instant;
use trivial_logic_methods::{TRIVIAL_LOGIC_GUEST_ELF, TRIVIAL_LOGIC_GUEST_ID};

fn main() {
    let input = TrivialLogicWitness::default();
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    let prove_start_timer = Instant::now();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, TRIVIAL_LOGIC_GUEST_ELF).unwrap();

    let prove_duration = prove_start_timer.elapsed();
    println!("Trivial logic prove duration time: {:?}", prove_duration);

    // extract the receipt.
    let receipt = prove_info.receipt;

    let _output: LogicInstance = receipt.journal.decode().unwrap();

    let verify_start_timer = Instant::now();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(TRIVIAL_LOGIC_GUEST_ID).unwrap();

    let verify_duration = verify_start_timer.elapsed();
    println!("Trivial logic verify duration time: {:?}", verify_duration);
}

// This is for local testing only. It updates the elf binary and prints the ID
// using the locally compiled circuit.
#[test]
fn print_trivial_logic_elf_id() {
    // Write the elf binary to a file
    std::fs::write(
        "../../arm/elfs/trivial-logic-guest.bin",
        TRIVIAL_LOGIC_GUEST_ELF,
    )
    .expect("Failed to write trivial logic guest ELF binary");

    // Print the ID
    use risc0_zkvm::sha::Digest;
    println!(
        "TRIVIAL_LOGIC_GUEST_ID: {:?}",
        Digest::from(TRIVIAL_LOGIC_GUEST_ID)
    );
}
