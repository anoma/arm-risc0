use crate::{
    compliance::{ComplianceInstance, ComplianceWitness},
    constants::{COMPLIANCE_PK, COMPLIANCE_VK},
    error::ArmError,
    proving_system::{journal_to_instance, prove, verify as verify_proof},
};
use k256::ProjectivePoint;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct ComplianceUnit {
    // vk is a constant in the compliance unit, so we don't place it here.
    pub proof: Vec<u8>,
    pub instance: Vec<u8>,
}

impl ComplianceUnit {
    // Proving key and verifying key are constants, so we don't need to pass
    // them as parameters. Instance is generated by proving.
    pub fn create(witness: &ComplianceWitness) -> Result<Self, ArmError> {
        let (proof, instance) = prove(COMPLIANCE_PK, witness)?;
        Ok(ComplianceUnit { proof, instance })
    }

    pub fn verify(&self) -> Result<(), ArmError> {
        verify_proof(&COMPLIANCE_VK, &self.instance, &self.proof)
    }

    pub fn delta(&self) -> Result<ProjectivePoint, ArmError> {
        self.get_instance()?.delta_projective()
    }

    pub fn get_instance(&self) -> Result<ComplianceInstance, ArmError> {
        journal_to_instance(&self.instance)
    }
}
